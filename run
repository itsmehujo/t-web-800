#!/usr/bin/env bash

curDir=$(basename ${PWD})

# sources DOTENV
source ./.env
if [[ -f ./.env.local ]]; then
  set -o allexport
  source ./.env.local
  set +o allexport
fi

# docker project name is current dir, if not set
prjName=${COMPOSE_PROJECT_NAME:-$curDir}
containerNameSeparator=${COMPOSE_CONTAINER_SEPARATOR:-"-"}
postgresName="${prjName}${containerNameSeparator}postgres${containerNameSeparator}1"

###################################################
## DOCKER
# starts the containers
start() {
	docker compose --file docker-compose.dev.yml up -d
}

startBack() {
	docker compose --file docker-compose.dev.yml up caddy main_app activities hotels maps restaurants postgres -d
}
startPostgres() {
	docker compose--file docker-compose.dev.yml up postgres -d
}

# stops the containers
stop() {
	docker compose stop
}

# destroys all containers
wipe() {
	docker-compose down --rmi all --volumes
}

freshStart() {
	docker-compose down --rmi all --volumes && build
}

# builds containers
build() {
	docker compose --file docker-compose.dev.yml up --force-recreate --build --no-deps caddy main_app activities hotels maps restaurants postgres
}



#################################################
## COMMAND INTERPOLATION HELPERS

# runs bash on the @param container
# @param {param} the app to run bash into
# @param {param} the command
runBash() {
	case $1 in
	main_app) $(execMainApp $1) bash $2;;
	activities) $(execActivitiesApp $1) bash;;
	hotels) $(execHotelsApp $1) bash;;
	maps) $(execMapsApp $1) bash;;
	restaurants) $(execRestaurantsApp $1) bash;;
	*) echo "unknown container";;
	esac
}
# runs psql on the postgres container
# @param {Boolean} interactive?
runPsql() {
	$(execPostgres $1) \
		bash -c 'psql -U ${POSTGRES_USER} ${POSTGRES_DB}'
}
execMainApp() {
	if [[ $1 ]]; then tty="-it"; else tty=""; fi
	echo "docker exec ${tty} ${prjName}${containerNameSeparator}main_app${containerNameSeparator}1"
}
execActivitiesApp() {
	if [[ $1 ]]; then tty="-it"; else tty=""; fi
	echo "docker exec ${tty} ${prjName}${containerNameSeparator}activities${containerNameSeparator}1"
}
execHotelsApp() {
	if [[ $1 ]]; then tty="-it"; else tty=""; fi
	echo "docker exec ${tty} ${prjName}${containerNameSeparator}hotels${containerNameSeparator}1"
}
execMapsApp() {
	if [[ $1 ]]; then tty="-it"; else tty=""; fi
	echo "docker exec ${tty} ${prjName}${containerNameSeparator}maps${containerNameSeparator}1"
}
execRestaurantsApp() {
	if [[ $1 ]]; then tty="-it"; else tty=""; fi
	echo "docker exec ${tty} ${prjName}${containerNameSeparator}restaurants${containerNameSeparator}1"
}
# echoes a docker exec running on the postgres container
# @param {Boolean} interactive or not
execPostgres() {
	if [[ $1 ]]; then tty="-it"; else tty=""; fi
	echo "docker exec ${tty} ${prjName}${containerNameSeparator}postgres${containerNameSeparator}1"
}


###################################################
## COMMANDS
# bash
bash() {
	runBash $1 $2
}
# psql
psql() {
	runPsql 1
}

### symfony
# runs arbitrary manage commands
# @param {Boolean} interactive?
# @param the command
startMainApp() {
	$(execMainApp $1) \
		symfony server:start --port=$MAIN_BACKEND_PORT -d
}
startActivities() {
	$(execActivitiesApp $1) \
		symfony server:start --port=$ACTIVITIES_BACKEND_PORT -d
}
startHotels() {
	$(execHotelsApp $1) \
		symfony server:start --port=$HOTELS_BACKEND_PORT -d
}
startMaps() {
	$(execMapsApp $1) \
		symfony server:start --port=$MAPS_BACKEND_PORT -d
}
startRestaurants() {
	$(execRestaurantsApp $1) \
		symfony server:start --port=$RESTAURANTS_BACKEND_PORT -d
}

debugApp() {
	$(execMainApp $1) \
		symfony server:log
}

debugActivities() {
	$(execActivitiesApp $1) \
		symfony server:log
}

debugHotels() {
	$(execHotelsApp $1) \
		symfony server:log	
}

debugMaps() {
	$(execMapsApp $1) \
		symfony server:log	
}

debugRestaurants() {
	$(execRestaurantsApp $1) \
		symfony server:log	
}

startServices() {
	startMainApp && startActivities && startHotels && startMaps && startRestaurants
}

mainAppDependencies() {
	$(execMainApp 0) composer install --no-scripts
}

activitiesDependencies() {
	$(execActivitiesApp 0) composer install --no-scripts
}
hotelsDependencies() {
	$(execHotelsApp 0) composer install --no-scripts
}
mapsDependencies() {
	$(execMapsApp 0) composer install --no-scripts
}
restaurantsDependencies() {
	$(execRestaurantsApp 0) composer install --no-scripts
}

dependencies() {
	mainAppDependencies && activitiesDependencies && hotelsDependencies && mapsDependencies && restaurantsDependencies
}

mainAppMigrations() {
	echo "CONTEXT: main_app" && $(execMainApp 0) symfony console make:migration
}

activitiesMigrations() {
	echo "CONTEXT: activities" && $(execActivitiesApp 0) symfony console make:migration
}

hotelsMigrations() {
	echo "CONTEXT: hotels" && $(execHotelsApp 0) symfony console make:migration
}

mapsMigrations() {
	echo "CONTEXT: migrations" && $(execMapsApp 0) symfony console make:migration
}

restaurantsMigrations() {
	echo "CONTEXT: restaurants" && $(execRestaurantsApp 0) symfony console make:migration
}

makemigrations() {
	mainAppMigrations && activitiesMigrations && hotelsMigrations && mapsMigrations && restaurantsMigrations
}


mainAppMigrate() {
	echo "CONTEXT: main_app" && $(execMainApp 0) symfony console doctrine:migration:migrate
}

activitiesMigrate() {
	echo "CONTEXT: activities" && $(execActivitiesApp 0) symfony console doctrine:migration:migrate
}

hotelsMigrate() {
	echo "CONTEXT: hotels" && $(execHotelsApp 0) symfony console doctrine:migration:migrate
}

mapsMigrate() {
	echo "CONTEXT: migrations" && $(execMapsApp 0) symfony console doctrine:migration:migrate
}

restaurantsMigrate() {
	echo "CONTEXT: restaurants" && $(execRestaurantsApp 0) symfony console doctrine:migration:migrate
}

### TESTS && DOCS
# runs pytest in debug mode, passing down any params
# - if no params, pytest in the entire project is run
# - if one param, pytest is run on the given app w/ debugger support
# - if two params, pytest is run in the given app,
#   selecting the tests matching the given string, w/ debugger support



### SHORTCUTS

# runs docker and the servers
back() {
	startBack && startServices
}

setupLocalUrl() {
	cat << URL >> /etc/hosts
# EPIC ROAD TRIP URLS
127.0.0.1 epicroadtrip.local api.epicroadtrip.local activities.epicroadtrip.local maps.epicroadtrip.local hotels.epicroadtrip.local restaurants.epicroadtrip.local
## END 
URL
}

refresh() {
	dependencies
}

prepare() {
	refresh
	loaddb
}

### DATABASE
resetdb() {
	$(execPostgres 0) \
		bash -c \
		'dropdb -U ${POSTGRES_USER} ${POSTGRES_DB} &&createdb -U ${POSTGRES_USER} ${POSTGRES_DB}'
}

loaddb() {
	docker cp db/dump.sql ${postgresName}:/
	$(execPostgres 0) \
		bash -c \
		"psql -U ${POSTGRES_USER} ${POSTGRES_DB} < /dump.sql"
	$(execPostgres 0) \
		bash -c \
		'rm /dump.sql'
}

loaddump() {
	docker cp db/dump.pgdump ${postgresName}:/
	$(execPostgres 0) \
		bash -c \
		"pg_restore --no-privileges --no-owner -U ${POSTGRES_USER} -d ${POSTGRES_DB} /dump.pgdump"
	$(execPostgres 0) \
		bash -c \
		'rm /dump.pgdump'
}

dumpdb() {
	$(execPostgres 0) \
		bash -c \
		"pg_dump -U ${POSTGRES_USER} ${POSTGRES_DB} > /dump.sql"
	docker cp ${postgresName}:/dump.sql ./db/
	$(execPostgres 0) \
		bash -c \
		'rm /dump.sql'
}




# runs the command passed as first argument, passing to it all other arguments
cmd=$1
shift
$cmd $@